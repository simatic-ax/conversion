// Settings for Copilot usage in this project

// 1. Code Generation Guidelines:
// - Always generate code in IEC61131-3 Structured Text (ST) format.
// - All functions must include inline documentation in the following format:
//   /// <Brief description of the function>
//   /// Input: <Parameter descriptions>
//   /// Returns: <Return value description>
// Example:
//   /// Converts a subset of a CHAR array to a string.
//   /// Input: arr - Input CHAR array to convert.
//   ///        startIdx - Start index of the subset.
//   ///        endIdx - End index of the subset.
//   /// Returns: A string representation of the specified subset of the CHAR array.
//   FUNCTION ToString : STRING
//       VAR_INPUT
//           arr : ARRAY[*] OF CHAR; // Input CHAR array to convert
//           startIdx : INT; // Start index of the subset
//           endIdx : INT; // End index of the subset
//       END_VAR
//       ;
//   END_FUNCTION

// 2. Unit Test Guidelines:
// - Use AxUnit for unit testing.
// - Tests should follow the structure below:
//   - {TestFixture} to define a test class.
//   - {Test} for individual test methods.
//   - Support parameterized tests using {Test(...)} annotations.
// Example:
//   USING AxUnit.Assert;
//   NAMESPACE AnyNamespace
//       {TestFixture}
//       CLASS TestClass
//           VAR
//               val : LINT;
//               val2 : ULINT;
//               res : BOOL;
//           END_VAR
//
//           {Test}
//           METHOD PUBLIC Convert_STRING_0_TO_LINT_0
//               res := StringToAnyInt(str := '0', value => val);
//               Equal(expected := 0, actual := val);
//               Equal(expected := TRUE, actual := res);
//           END_METHOD
//
//           {Test(str := STRING#'18446744073709551746', value := ULINT#0, success := FALSE)}
//           {Test(str := STRING#'18446744073709551800', value := ULINT#0, success := FALSE)}
//           METHOD PUBLIC Convert_STRING_TO_ULINT
//               VAR_INPUT
//                   str : STRING;
//                   value : ULINT;
//                   success : BOOL;
//               END_VAR
//               VAR_TEMP
//                   resVal : ULINT;
//               END_VAR
//               res := StringToULint(str := str, value => resVal);
//               Equal(expected := value, actual := resVal);
//               Equal(expected := success, actual := res);
//           END_METHOD
//       END_CLASS
//   END_NAMESPACE
